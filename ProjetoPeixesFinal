#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F,16,2);
Servo meuServo;

const int botao1Pin = 4;
const int botao2Pin = 2;
const int botao3Pin = 3;

const int FECHADO = 45;
const int ABERTO = 32;

enum Estado {SELECIONA_ESPECIE, SELECIONA_QUANTIDADE, SELECIONA_TEMPO, ALIMENTANDO};
Estado estado = SELECIONA_ESPECIE;

String especies[3] = {"Beta", "Dourado", "Carpa"};
int tempoAberto[3] = {200, 400, 600};
int quantidade = 1;
int especieSelecionada = 0;
int tempoAlimentacao = 1; // tempo em minutos

unsigned long tempoAnterior = 0;

void setup() {
  pinMode(botao1Pin, INPUT_PULLUP);
  pinMode(botao2Pin, INPUT_PULLUP);
  pinMode(botao3Pin, INPUT_PULLUP);

  lcd.init();
  meuServo.attach(9);
  meuServo.write(FECHADO);
  atualizaDisplay();
}

void loop() {
  if (digitalRead(botao1Pin) == LOW) {
    delay(100);
    switch(estado) {
      case SELECIONA_ESPECIE:
        especieSelecionada = (especieSelecionada + 1) % 3;
        break;
      case SELECIONA_QUANTIDADE:
        if(quantidade < 99) quantidade++;
        break;
      case SELECIONA_TEMPO:
        tempoAlimentacao++;
        break;
      case ALIMENTANDO:
        // bot達o 1 n達o faz nada enquanto estiver alimentando
        break;
    }
    atualizaDisplay();
    delay(200);
  }
  if (digitalRead(botao2Pin) == LOW) {
    delay(100);
    switch(estado) {
      case SELECIONA_ESPECIE:
        especieSelecionada = (especieSelecionada + 2) % 3;
        break;
      case SELECIONA_QUANTIDADE:
        if(quantidade > 1) quantidade--;
        break;
      case SELECIONA_TEMPO:
        if(tempoAlimentacao > 1) tempoAlimentacao--;
        break;
      case ALIMENTANDO:
        // bot達o 2 n達o faz nada enquanto estiver alimentando
        break;
    }
    atualizaDisplay();
    delay(200);
  }
  if (digitalRead(botao3Pin) == LOW) {
    delay(600);
    switch(estado) {
      case SELECIONA_ESPECIE:
        estado = SELECIONA_QUANTIDADE;
        break;
      case SELECIONA_QUANTIDADE:
        estado = SELECIONA_TEMPO;
        break;
      case SELECIONA_TEMPO:
        estado = ALIMENTANDO;
        tempoAnterior = millis();
        break;
      case ALIMENTANDO:
        estado = SELECIONA_ESPECIE;
        quantidade = 1;
        tempoAlimentacao = 1;
        break;
    }
    atualizaDisplay();
    delay(200);
  }
  
  if(estado == ALIMENTANDO && millis() - tempoAnterior >= tempoAlimentacao * 60000) {
    alimentarPeixe(tempoAberto[especieSelecionada] * (quantidade * 0,75));
    tempoAnterior = millis();
  }
}

void atualizaDisplay() {
  lcd.clear();
  lcd.setBacklight(HIGH);
  switch(estado) {
    case SELECIONA_ESPECIE:
      lcd.print("Especie: " + especies[especieSelecionada]);
      break;
    case SELECIONA_QUANTIDADE:
      lcd.print("Quantidade: ");
      lcd.print(quantidade);
      break;
    case SELECIONA_TEMPO:
      lcd.print("Tempo (min): ");
      lcd.print(tempoAlimentacao);
      break;
    case ALIMENTANDO:
    lcd.setBacklight(LOW);
      lcd.print("Alimentando...");
      break;
  }
}

void alimentarPeixe(int delayTime) {
  meuServo.write(ABERTO);
  delay(delayTime);
  meuServo.write(FECHADO);
}
